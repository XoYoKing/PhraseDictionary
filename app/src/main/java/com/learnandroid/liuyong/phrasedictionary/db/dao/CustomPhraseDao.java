package com.learnandroid.liuyong.phrasedictionary.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.learnandroid.liuyong.phrasedictionary.db.bean.CustomPhrase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOM_PHRASE".
*/
public class CustomPhraseDao extends AbstractDao<CustomPhrase, Long> {

    public static final String TABLENAME = "CUSTOM_PHRASE";

    /**
     * Properties of entity CustomPhrase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property MPhrase = new Property(1, String.class, "mPhrase", false, "M_PHRASE");
        public final static Property MHypy = new Property(2, String.class, "mHypy", false, "M_HYPY");
        public final static Property MExplain = new Property(3, String.class, "mExplain", false, "M_EXPLAIN");
        public final static Property MComment = new Property(4, String.class, "mComment", false, "M_COMMENT");
        public final static Property MLabel = new Property(5, Integer.class, "mLabel", false, "M_LABEL");
        public final static Property MFirstTime = new Property(6, String.class, "mFirstTime", false, "M_FIRST_TIME");
        public final static Property MAccurary = new Property(7, Integer.class, "mAccurary", false, "M_ACCURARY");
    }


    public CustomPhraseDao(DaoConfig config) {
        super(config);
    }
    
    public CustomPhraseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOM_PHRASE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"M_PHRASE\" TEXT NOT NULL ," + // 1: mPhrase
                "\"M_HYPY\" TEXT NOT NULL ," + // 2: mHypy
                "\"M_EXPLAIN\" TEXT NOT NULL ," + // 3: mExplain
                "\"M_COMMENT\" TEXT," + // 4: mComment
                "\"M_LABEL\" INTEGER," + // 5: mLabel
                "\"M_FIRST_TIME\" TEXT," + // 6: mFirstTime
                "\"M_ACCURARY\" INTEGER);"); // 7: mAccurary
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOM_PHRASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CustomPhrase entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getMPhrase());
        stmt.bindString(3, entity.getMHypy());
        stmt.bindString(4, entity.getMExplain());
 
        String mComment = entity.getMComment();
        if (mComment != null) {
            stmt.bindString(5, mComment);
        }
 
        Integer mLabel = entity.getMLabel();
        if (mLabel != null) {
            stmt.bindLong(6, mLabel);
        }
 
        String mFirstTime = entity.getMFirstTime();
        if (mFirstTime != null) {
            stmt.bindString(7, mFirstTime);
        }
 
        Integer mAccurary = entity.getMAccurary();
        if (mAccurary != null) {
            stmt.bindLong(8, mAccurary);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CustomPhrase entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getMPhrase());
        stmt.bindString(3, entity.getMHypy());
        stmt.bindString(4, entity.getMExplain());
 
        String mComment = entity.getMComment();
        if (mComment != null) {
            stmt.bindString(5, mComment);
        }
 
        Integer mLabel = entity.getMLabel();
        if (mLabel != null) {
            stmt.bindLong(6, mLabel);
        }
 
        String mFirstTime = entity.getMFirstTime();
        if (mFirstTime != null) {
            stmt.bindString(7, mFirstTime);
        }
 
        Integer mAccurary = entity.getMAccurary();
        if (mAccurary != null) {
            stmt.bindLong(8, mAccurary);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CustomPhrase readEntity(Cursor cursor, int offset) {
        CustomPhrase entity = new CustomPhrase( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getString(offset + 1), // mPhrase
            cursor.getString(offset + 2), // mHypy
            cursor.getString(offset + 3), // mExplain
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mComment
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // mLabel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mFirstTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // mAccurary
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CustomPhrase entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMPhrase(cursor.getString(offset + 1));
        entity.setMHypy(cursor.getString(offset + 2));
        entity.setMExplain(cursor.getString(offset + 3));
        entity.setMComment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMLabel(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMFirstTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMAccurary(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CustomPhrase entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CustomPhrase entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CustomPhrase entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
